<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kosta.boot.board.domain.repository.mybatis.mapper.ArticleMapper">


    <sql id="boardColumns">
        title
		, content
		, writer
		, view_cnt
		, notice_yn
		, secret_yn
		, delete_yn
		, createdAt
		, modifiedAt
		, deletedAt
        , user_no
        , user_name
        , user_id
    </sql>


    <insert id="save" parameterType="ArticleDto" useGeneratedKeys="true" keyProperty="idx">
        INSERT INTO bootboard.ARTICLE(title, content, writer, view_cnt, notice_yn, secret_yn, delete_yn, createdAt,
                                      modifiedAt, deletedAt, user_no, user_name, user_id)
        VALUES (#{title},
                #{content},
                #{writer},
                #{viewCnt},
                COALESCE(#{noticeYn}, 'N'),
                COALESCE(#{secretYn}, 'N'),
                COALESCE(#{deletedYn}, 'N'),
                NOW(),
                #{modifiedAt},
                #{deletedAt},
                #{userNo},
                #{userName},
                #{userId})
    </insert>


<!--    <select id="findAll" parameterType="Pagination" resultType="ArticleDto">-->
<!--        SELECT idx,-->
<!--               title,-->
<!--               content,-->
<!--               writer,-->
<!--               view_cnt,-->
<!--               notice_yn,-->
<!--               secret_yn,-->
<!--               delete_yn,-->
<!--               createdAt,-->
<!--               modifiedAt,-->
<!--               deletedAt,-->
<!--               user_no,-->
<!--               user_name,-->
<!--               user_id-->
<!--        FROM bootboard.ARTICLE articleDto-->
<!--        WHERE delete_yn = 'N' or delete_yn is null-->
<!--        ORDER BY idx DESC;-->
<!--    </select>-->


    <select id="findAll" parameterType="Pagination" resultType="ArticleDto">
        SELECT article.*
        FROM (SELECT *
              FROM bootboard.ARTICLE article
              ORDER BY idx ASC) article
        WHERE (delete_yn = 'N' or delete_yn is null)
        <include refid="search_m" />
        LIMIT   #{articlesPerPage} OFFSET #{firstArticleIdx}
    </select>


    <sql id="search_m">
        <!-- 검색 키워드가 있을 때 -->
        <if test="searchCondition.searchKeyword != null and searchCondition.searchKeyword != ''">
            <choose>
                <!-- 검색 유형이 있을 때 -->
                <when test="searchCondition.searchType != null and searchCondition.searchType != ''">
                    <choose>
                        <when test="'title'.equals(searchCondition.searchType)">
                            AND title LIKE CONCAT('%', #{searchCondition.searchKeyword}, '%')
                        </when>
                        <when test="'content'.equals(searchCondition.searchType)">
                            AND content LIKE CONCAT('%', #{searchCondition.searchKeyword}, '%')
                        </when>
                        <when test="'writer'.equals(searchCondition.searchType)">
                            AND writer LIKE CONCAT('%', #{searchCondition.searchKeyword}, '%')
                        </when>
                    </choose>
                </when>
                <!-- 검색 유형이 없을 때 -->
                <otherwise>
                    AND
                    (
                    title LIKE CONCAT('%', #{searchCondition.searchKeyword}, '%')
                    OR content LIKE CONCAT('%', #{searchCondition.searchKeyword}, '%')
                    OR writer LIKE CONCAT('%', #{searchCondition.searchKeyword}, '%')
                    )
                </otherwise>
            </choose>
        </if>
    </sql>



    <select id="findByIdx" parameterType="long" resultType="ArticleDto">
        #         SELECT idx, title, content, writer, view_cnt, createdAt
        SELECT idx,
               title,
               content,
               writer,
               view_cnt,
               notice_yn,
               secret_yn,
               delete_yn,
               createdAt,
               modifiedAt,
               deletedAt,
               user_no,
               user_name,
               user_id
        FROM bootboard.ARTICLE article
        WHERE idx = #{idx}
    </select>


    <update id="delete" parameterType="long">
        UPDATE bootboard.ARTICLE
        SET
            delete_yn = 'Y',
            deletedAt = now()
        WHERE
            idx = #{idx}
    </update>

    <select id="getCount" resultType="int">
        SELECT	COUNT(*)
        FROM    bootboard.ARTICLE article
        WHERE   delete_yn = 'N' or delete_yn is null
    </select>


</mapper>

